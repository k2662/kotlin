/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See native/swift/sir/tree-generator/Readme.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.sir.visitors

import org.jetbrains.kotlin.sir.*

/**
 * Auto-generated by [org.jetbrains.kotlin.sir.tree.generator.printer.TransformerPrinter]
 */
abstract class SirTransformer<in D> : SirVisitor<SirElement, D>() {

    abstract fun <E : SirElement> transformElement(element: E, data: D): E

    final override fun visitElement(element: SirElement, data: D): SirElement {
        return transformElement(element, data)
    }

    open fun transformModule(module: SirModule, data: D): SirModule {
        return transformElement(module, data)
    }

    final override fun visitModule(module: SirModule, data: D): SirModule {
        return transformModule(module, data)
    }


    open fun transformDeclarationContainer(declarationContainer: SirDeclarationContainer, data: D): SirDeclarationContainer {
        return transformElement(declarationContainer, data)
    }

    final override fun visitDeclarationContainer(declarationContainer: SirDeclarationContainer, data: D): SirDeclarationContainer {
        return transformDeclarationContainer(declarationContainer, data)
    }

    open fun transformDeclaration(declaration: SirDeclaration, data: D): SirDeclaration {
        return transformElement(declaration, data)
    }

    final override fun visitDeclaration(declaration: SirDeclaration, data: D): SirDeclaration {
        return transformDeclaration(declaration, data)
    }

    open fun transformForeignDeclaration(foreignDeclaration: SirForeignDeclaration, data: D): SirDeclaration {
        return transformElement(foreignDeclaration, data)
    }

    final override fun visitForeignDeclaration(foreignDeclaration: SirForeignDeclaration, data: D): SirDeclaration {
        return transformForeignDeclaration(foreignDeclaration, data)
    }

    open fun transformDeclarationWithName(declarationWithName: SirDeclarationWithName, data: D): SirDeclaration {
        return transformElement(declarationWithName, data)
    }

    final override fun visitDeclarationWithName(declarationWithName: SirDeclarationWithName, data: D): SirDeclaration {
        return transformDeclarationWithName(declarationWithName, data)
    }

    open fun transformNamedTypeDeclaration(namedTypeDeclaration: SirNamedTypeDeclaration, data: D): SirDeclaration {
        return transformElement(namedTypeDeclaration, data)
    }

    final override fun visitNamedTypeDeclaration(namedTypeDeclaration: SirNamedTypeDeclaration, data: D): SirDeclaration {
        return transformNamedTypeDeclaration(namedTypeDeclaration, data)
    }

    open fun transformEnum(enum: SirEnum, data: D): SirDeclaration {
        return transformElement(enum, data)
    }

    final override fun visitEnum(enum: SirEnum, data: D): SirDeclaration {
        return transformEnum(enum, data)
    }

    open fun transformCallable(callable: SirCallable, data: D): SirDeclaration {
        return transformElement(callable, data)
    }

    final override fun visitCallable(callable: SirCallable, data: D): SirDeclaration {
        return transformCallable(callable, data)
    }

    open fun transformFunction(function: SirFunction, data: D): SirDeclaration {
        return transformElement(function, data)
    }

    final override fun visitFunction(function: SirFunction, data: D): SirDeclaration {
        return transformFunction(function, data)
    }

    open fun transformForeignFunction(foreignFunction: SirForeignFunction, data: D): SirDeclaration {
        return transformElement(foreignFunction, data)
    }

    final override fun visitForeignFunction(foreignFunction: SirForeignFunction, data: D): SirDeclaration {
        return transformForeignFunction(foreignFunction, data)
    }
}

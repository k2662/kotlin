/*
 * Copyright 2010-2023 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

// This file was generated automatically. See native/swift/sir/tree-generator/Readme.md.
// DO NOT MODIFY IT MANUALLY.

package org.jetbrains.kotlin.sir.visitors

import org.jetbrains.kotlin.sir.*

/**
 * Auto-generated by [org.jetbrains.kotlin.sir.tree.generator.printer.VisitorPrinter]
 */
abstract class SirVisitor<out R, in D> {

    abstract fun visitElement(element: SirElement, data: D): R

    open fun visitModule(module: SirModule, data: D): R =
        visitElement(module, data)

    open fun visitDeclarationContainer(declarationContainer: SirDeclarationContainer, data: D): R =
        visitElement(declarationContainer, data)

    open fun visitDeclaration(declaration: SirDeclaration, data: D): R =
        visitElement(declaration, data)

    open fun visitForeignDeclaration(foreignDeclaration: SirForeignDeclaration, data: D): R =
        visitDeclaration(foreignDeclaration, data)

    open fun visitDeclarationWithName(declarationWithName: SirDeclarationWithName, data: D): R =
        visitDeclaration(declarationWithName, data)

    open fun visitNamedTypeDeclaration(namedTypeDeclaration: SirNamedTypeDeclaration, data: D): R =
        visitDeclarationWithName(namedTypeDeclaration, data)

    open fun visitEnum(enum: SirEnum, data: D): R =
        visitNamedTypeDeclaration(enum, data)

    open fun visitCallable(callable: SirCallable, data: D): R =
        visitDeclaration(callable, data)

    open fun visitFunction(function: SirFunction, data: D): R =
        visitCallable(function, data)

    open fun visitForeignFunction(foreignFunction: SirForeignFunction, data: D): R =
        visitCallable(foreignFunction, data)
}
